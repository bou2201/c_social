// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User schema
model User {
  id         String    @id
  email      String?   @unique
  username   String?   @unique
  first_name String?
  last_name  String?
  image_url  String?
  banner_url String?
  banner_id  String?   @unique
  posts      Post[]
  likes      Like[]
  comments   Comment[]
}

// Post schema
enum FileType {
  IMAGE
  VIDEO
  RAW
  AUTO

  @@map("ImageType")
}

model File {
  id            String   @id
  asset_id      String
  public_id     String
  resource_type FileType @default(IMAGE)
  secure_url    String
  signature     String
  thumbnail_url String
  url           String
  path          String
  width         Int
  height        Int
  post          Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        Int?
}

model Post {
  id        Int       @id @default(autoincrement())
  content   String?
  media     String?
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  files     File[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  likes     Like[]
  comments  Comment[]
  trends    Trend[]
}

// Like schema
model Like {
  id        Int      @id @default(autoincrement())
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Comment schema
model CommentFile {
  id            String   @id
  asset_id      String
  public_id     String
  resource_type FileType @default(IMAGE)
  secure_url    String
  signature     String
  thumbnail_url String
  url           String
  path          String
  width         Int
  height        Int
  comment       Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId     Int?
}

model Comment {
  id        Int           @id @default(autoincrement())
  comment   String?
  author    User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  post      Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  files     CommentFile[]
}

// Trend schema
model Trend {
  id     Int    @id @default(autoincrement())
  name   String @unique
  slug   String @unique
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
}
